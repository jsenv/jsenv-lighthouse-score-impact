/*

*/

export const generateCommentBody = ({
  baseReport,
  headReport,
  baseGist,
  headGist,
  pullRequestBase,
  pullRequestHead,
}) => {
  const title = `[light house report](https://googlechrome.github.io/lighthouse/viewer/?gist=${baseGist.id})`

  const scoreTable = renderScoreTable({
    baseReport,
    headReport,
    baseGist,
    headGist,
    pullRequestBase,
    pullRequestHead,
  })

  return `<!-- Generated by @jsenv/github-pull-request-lighthouse-impact -->
<!-- base-gist-id=${baseGist.id} -->
<!-- head-gist-id=${headGist.id} -->

${title}
---
${scoreTable}`
}

const renderScoreTable = ({ baseReport, headReport, pullRequestBase, pullRequestHead }) => {
  const headerCells = [
    `<th nowrap>Category</th>`,
    `<th nowrap>Diff</th>`,
    `<th nowrap>${pullRequestBase} score</th>`,
    `<th nowrap>${pullRequestHead} score</th>`,
  ]

  const baseScoreMap = lighthouseReportToScoreMap(baseReport)
  const headScoreMap = lighthouseReportToScoreMap(headReport)

  const bodyLines = []
  Object.keys(baseScoreMap).forEach((key) => {
    const baseScore = baseScoreMap[key]
    const headScore = headScoreMap[key]
    const cells = [
      `<td nowrap>${key}</td>`,
      `<td nowrap>${scoreToDisplayedScore(headScore - baseScore)}</td>`,
      `<td nowrap>${scoreToDisplayedScore(baseScore)}</td>`,
      `<td nowrap>${scoreToDisplayedScore(headScore)}</td>`,
    ]
    bodyLines.push(
      `
        ${cells.join(`
        `)}`,
    )
  })

  return `<table>
    <thead>
      <tr>
        ${headerCells.join(`
        `)}
      </tr>
    </thead>
    <tbody>
      <tr>${bodyLines.join(`
      </tr>
      <tr>`)}
      </tr>
    </tbody>
  </table>`
}

const lighthouseReportToScoreMap = ({ categories }) => {
  const scoreMap = {}
  Object.keys(categories).forEach((categoryName) => {
    const score = categories[categoryName].score
    scoreMap[categoryName] = score
  })
  return scoreMap
}

const scoreToDisplayedScore = (score) => twoDecimalsPrecision(score)

const twoDecimalsPrecision = (floatingNumber) => Math.round(floatingNumber * 100) / 100
