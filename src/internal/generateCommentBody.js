/*

*/

import { formatNumericDiff } from "./formatNumericDiff.js"

export const GENERATED_BY_COMMENT = "<!-- Generated by @jsenv/lighthouse-score-merge-impact -->"

export const generateCommentBody = ({
  headerMessages = [],
  baseReport,
  headReport,
  baseGist,
  headGist,
  pullRequestBase,
  pullRequestHead,
}) => {
  const baseVersion = baseReport.lighthouseVersion
  const headVersion = headReport.lighthouseVersion
  let impactAnalysisEnabled = true
  if (baseVersion !== headVersion) {
    impactAnalysisEnabled = false
    headerMessages.push(
      `**Warning:** Impact analysis skipped because lighthouse version are different on \`${pullRequestBase}\` (${baseVersion}) and \`${pullRequestHead}\` (${headVersion}).`,
    )
  }

  return `${GENERATED_BY_COMMENT}
${baseGist ? `<!-- base-gist-id=${baseGist.id} -->` : ``}
${headGist ? `<!-- head-gist-id=${headGist.id} -->` : ``}
<h3>Lighthouse score merge impact</h3>

${renderHeader(headerMessages)}
${
  impactAnalysisEnabled
    ? renderBody({ baseReport, headReport, pullRequestBase, pullRequestHead })
    : ""
}
${renderFooter({ baseGist, headGist, pullRequestBase, pullRequestHead })}`
}

const renderHeader = (headerMessages) => {
  if (headerMessages.length === 0) {
    return ""
  }

  return `---

${headerMessages.join(`

`)}

---`
}

const renderBody = ({ baseReport, headReport, pullRequestBase, pullRequestHead }) => {
  return Object.keys(baseReport.categories).map((categoryName) => {
    return renderCategory(categoryName, {
      baseReport,
      headReport,
      pullRequestBase,
      pullRequestHead,
    })
  }).join(`

`)
}

const renderCategory = (category, { baseReport, headReport, pullRequestBase, pullRequestHead }) => {
  const baseScore = scoreToDisplayedScore(baseReport.categories[category].score)
  const headScore = scoreToDisplayedScore(headReport.categories[category].score)
  const diff = headScore - baseScore
  const diffDisplayValue = diff ? formatNumericDiff(headScore - baseScore) : "no impact"

  return `<details>
  <summary>${category} (${diffDisplayValue})</summary>
  ${
    category === "performance"
      ? `<blockquote>Keep in mind performance score variation may be caused by factors unrelated to the pull request changes. <a href="https://github.com/GoogleChrome/lighthouse/blob/91b4461c214c0e05d318ec96f6585dcca52a51cc/docs/variability.md#score-variability">Learn more</a>.</blockquote>`
      : ""
  }
  ${renderCategoryScore(category, { baseReport, headReport, pullRequestBase, pullRequestHead })}
  ${renderCategoryAudits(category, {
    baseReport,
    headReport,
    pullRequestBase,
    pullRequestHead,
  })}
</details>`
}

const scoreToDisplayedScore = (score) => twoDecimalsPrecision(score)

const twoDecimalsPrecision = (floatingNumber) => Math.round(floatingNumber * 100) / 100

const renderCategoryScore = (category, { baseReport, headReport, pullRequestBase }) => {
  const baseScore = scoreToDisplayedScore(baseReport.categories[category].score)
  const headScore = scoreToDisplayedScore(headReport.categories[category].score)
  const diff = headScore - baseScore
  const diffDisplayValue = diff === 0 ? "none" : formatNumericDiff(headScore - baseScore)

  return `<h3>Global impact on ${category} score</h3>
  <table>
    <thead>
      <tr>
        <th nowrap>Impact</th>
        <th nowrap>${pullRequestBase}</th>
        <th nowrap>after merge</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td nowrap>${diffDisplayValue}</td>
        <td nowrap>${baseScore}</td>
        <td nowrap>${headScore}</td>
      </tr>
    </tbody>
  </table>`
}

const renderCategoryAudits = (category, { baseReport, headReport, pullRequestBase }) => {
  const { auditRefs } = baseReport.categories[category]
  const audits = []
  auditRefs.forEach((auditRef) => {
    const auditId = auditRef.id
    const baseAudit = baseReport.audits[auditId]
    const headAudit = headReport.audits[auditId]
    const baseAuditOutput = renderAudit(baseAudit)
    const headAuditOutput = renderAudit(headAudit)

    // both are not applicable
    if (baseAuditOutput === null && headAuditOutput === null) {
      return
    }

    // becomes applicable
    if (baseAuditOutput === null && headAuditOutput !== null) {
      audits.push([
        `<td nowrap>${auditId}</td>`,
        `<td nowrap>---</td>`,
        `<td nowrap>---</td>`,
        `<td nowrap>${headAuditOutput}</td>`,
      ])
      return
    }

    // becomes unapplicable
    if (baseAuditOutput !== null && headAuditOutput === null) {
      audits.push([
        `<td nowrap>${auditId}</td>`,
        `<td nowrap>---</td>`,
        `<td nowrap>${baseAuditOutput}</td>`,
        `<td nowrap>---</td>`,
      ])
      return
    }

    if (typeof baseAuditOutput === "number" && typeof headAuditOutput === "number") {
      const diff = headAuditOutput - baseAuditOutput

      audits.push([
        `<td nowrap>${auditId}</td>`,
        `<td nowrap>${diff === 0 ? "none" : formatNumericDiff(diff)}</td>`,
        `<td nowrap>${baseAuditOutput}</td>`,
        `<td nowrap>${headAuditOutput}</td>`,
      ])
      return
    }

    audits.push([
      `<td nowrap>${auditId}</td>`,
      `<td nowrap>${baseAuditOutput === headAuditOutput ? "none" : "---"}</td>`,
      `<td nowrap>${baseAuditOutput}</td>`,
      `<td nowrap>${headAuditOutput}</td>`,
    ])
  })

  return `<h3>Detailed impact on ${category} score</h3>
  <table>
    <thead>
      <tr>
        <th nowrap>${category} audit</th>
        <th nowrap>impact</th>
        <th nowrap>${pullRequestBase}</th>
        <th nowrap>after merge</th>
      </tr>
    </thead>
    <tbody>
      <tr>${audits.map(
        (cells) => `
        ${cells.join(`
        `)}`,
      ).join(`
      </tr>
      <tr>`)}
      </tr>
    </tbody>
  </table>`
}

const renderAudit = (audit) => {
  const { scoreDisplayMode } = audit

  if (scoreDisplayMode === "manual") {
    return null
  }

  if (scoreDisplayMode === "notApplicable") {
    return null
  }

  if (scoreDisplayMode === "informative") {
    const { displayValue } = audit
    if (typeof displayValue !== "undefined") return displayValue

    const { numericValue } = audit
    if (typeof numericValue !== "undefined") return numericValue

    return null
  }

  if (scoreDisplayMode === "binary") {
    const { score } = audit
    return score ? "✔" : "☓"
  }

  if (scoreDisplayMode === "numeric") {
    const { score } = audit
    return score * 100
  }

  return null
}

const renderFooter = ({ baseGist, headGist, pullRequestBase }) => {
  return `${
    baseGist
      ? `<sub>
  Impact analyzed comparing <a href="${gistIdToReportUrl(
    baseGist.id,
  )}">${pullRequestBase} report</a> and <a href="${gistIdToReportUrl(
          headGist.id,
        )}">report after merge</a>
</sub>
<br />`
      : ``
  }
<sub>
  Generated by <a href="https://github.com/jsenv/jsenv-lighthouse-score-merge-impact">lighthouse score merge impact</a>
</sub>`
}

const gistIdToReportUrl = (gistId) => {
  return `https://googlechrome.github.io/lighthouse/viewer/?gist=${gistId}`
}
