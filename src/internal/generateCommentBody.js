/*

*/

import { formatNumericDiff } from "./formatNumericDiff.js"

export const generateCommentBody = ({
  baseReport,
  headReport,
  baseGist,
  headGist,
  pullRequestBase,
  pullRequestHead,
}) => {
  return `<!-- Generated by @jsenv/github-pull-request-lighthouse-impact -->
<!-- base-gist-id=${baseGist.id} -->
<!-- head-gist-id=${headGist.id} -->

${renderBody({ baseReport, headReport, pullRequestBase, pullRequestHead })}
${renderFooter({ baseGist, headGist, pullRequestBase, pullRequestHead })}`
}

const renderBody = ({ baseReport, headReport, pullRequestBase, pullRequestHead }) => {
  return Object.keys(baseReport.categories).map((categoryName) => {
    return renderCategory(categoryName, {
      baseReport,
      headReport,
      pullRequestBase,
      pullRequestHead,
    })
  }).join(`

`)
}

const renderCategory = (category, { baseReport, headReport, pullRequestBase, pullRequestHead }) => {
  const headerCells = [
    `<th nowrap>Audit</th>`,
    `<th nowrap>Diff</th>`,
    `<th nowrap>${pullRequestBase}</th>`,
    `<th nowrap>${pullRequestHead}</th>`,
    `<th nowrap>Description</th>`,
  ]
  const baseScore = scoreToDisplayedScore(baseReport.categories[category].score)
  const headScore = scoreToDisplayedScore(headReport.categories[category].score)

  const scoreRow = [
    `<td nowrap>Score</td>`,
    `<td nowrap>${formatNumericDiff(headScore - baseScore)}</td>`,
    `<td nowrap>${baseScore}</td>`,
    `<td nowrap>${headScore}</td>`,
    `<td nowrap>${baseReport.categories[category].description}<td>`,
  ]

  const { auditRefs } = baseReport.categories[category]
  const auditRows = auditRefs
    .map((auditRef) => {
      const auditId = auditRef.id
      const baseAudit = baseReport.audits[auditId]
      const headAudit = headReport.audits[auditId]

      const { scoreDisplayMode } = baseAudit

      if (scoreDisplayMode === "binary") {
        const baseScore = baseAudit.score
        const headScore = headAudit.score

        // no changes
        if (baseScore === headScore) {
          return null
        }
        return [
          `<td nowrap>${auditId}</td>`,
          `<td nowrap>✔</td>`, // TODO: green color
          `<td nowrap>☓</td>`, // TODO: red color
          `<td nowrap>✔</td>`, // TODO: green color
          `<td nowrap>${baseAudit.description}</td>`,
        ]
      }

      if (scoreDisplayMode === "numeric") {
        const baseScore = baseAudit.score
        const headScore = headAudit.score

        // no changes
        if (baseScore === headScore) {
          return null
        }

        return [
          `<td nowrap>${auditId}</td>`,
          `<td nowrap>${formatNumericDiff(headScore - baseScore)}</td>`,
          `<td nowrap>${baseScore}</td>`,
          `<td nowrap>${headScore}</td>`,
          `<td nowrap>${baseAudit.description}</td>`,
        ]
      }

      return null
    })
    .filter((cells) => cells && cells.length > 0)

  const rows = [scoreRow, ...auditRows].map(
    (cells) => `
        ${cells.join(`
        `)}`,
  )

  return `<details>
  <summary>${category}</summary>
  <table>
    <thead>
      <tr>
        ${headerCells.join(`
        `)}
      </tr>
    </thead>
    <tbody>
      <tr>${rows.join(`
      </tr>
      <tr>`)}
      </tr>
    </tbody>
  </table>
</details>`
}

const scoreToDisplayedScore = (score) => twoDecimalsPrecision(score)

const twoDecimalsPrecision = (floatingNumber) => Math.round(floatingNumber * 100) / 100

const renderFooter = ({ baseGist, headGist, pullRequestBase, pullRequestHead }) => {
  return `
<sub>
  <a href="https://googlechrome.github.io/lighthouse/viewer/?gist=${baseGist.id}">Lighthouse report for ${pullRequestBase}</a>
</sub>
<br />
<sub>
  <a href="https://googlechrome.github.io/lighthouse/viewer/?gist=${headGist.id}">Lighthouse report for ${pullRequestHead}</a>
</sub>
<br />
<sub>
  Generated by <a href="https://github.com/jsenv/jsenv-github-pull-request-lighthouse-impact">github pull request lighthouse impact</a>
</sub>
`
}
