/* eslint-disable import/max-dependencies */
import { createOperation } from "@jsenv/cancellation"
import { createLogger } from "@jsenv/logger"
import {
  wrapExternalFunction,
  createCancellationTokenForProcess,
  assertAndNormalizeDirectoryUrl,
  resolveUrl,
  readFile,
} from "@jsenv/util"
import { createGist } from "./internal/createGist.js"
import { createPullRequestComment } from "./internal/createPullRequestComment.js"
import { getGist } from "./internal/getGist.js"
import { updateGist } from "./internal/updateGist.js"
import { updatePullRequestComment } from "./internal/updatePullRequestComment.js"
import { createUnexpectedGithubApiTokenError } from "./internal/errors.js"
import { readGithubWorkflowEnv, readPullRequestNumber } from "./internal/github-workflow-env.js"
import { getPullRequestCommentMatching } from "./internal/getPullRequestCommentMatching.js"
import { generateCommentBody } from "./internal/generateCommentBody.js"

export const reportLighthouseImpactIntoGithubPullRequest = async ({
  cancellationToken = createCancellationTokenForProcess(),
  logLevel,

  githubApiTokenForGist,
  projectDirectoryUrl,
  baseReportFileRelativeUrl,
  headReportFileRelativeUrl,
}) => {
  return wrapExternalFunction(async () => {
    const logger = createLogger({ logLevel })
    projectDirectoryUrl = assertAndNormalizeDirectoryUrl(projectDirectoryUrl)

    const {
      repositoryOwner,
      repositoryName,
      pullRequestBase,
      pullRequestHead,
      githubToken,
    } = readGithubWorkflowEnv()
    const pullRequestNumber = await readPullRequestNumber({ logger })

    if (typeof githubApiTokenForGist !== "string") {
      throw createUnexpectedGithubApiTokenError({ githubApiToken: githubApiTokenForGist })
    }
    if (typeof baseReportFileRelativeUrl !== "string") {
      throw new TypeError(
        `baseReportFileRelativeUrl must be a string, got ${baseReportFileRelativeUrl}`,
      )
    }
    if (typeof headReportFileRelativeUrl !== "string") {
      throw new TypeError(
        `headReportFileRelativeUrl must be a string, got ${headReportFileRelativeUrl}`,
      )
    }

    const baseReportFileUrl = resolveUrl(baseReportFileRelativeUrl, projectDirectoryUrl)
    const headReportFileUrl = resolveUrl(headReportFileRelativeUrl, projectDirectoryUrl)
    const filePromises = Promise.all([readFile(baseReportFileUrl), readFile(headReportFileUrl)])
    const existingCommentPromise = getPullRequestCommentMatching(
      ({ body }) =>
        body.match(/<!-- Generated by @jsenv\/github-pull-request-lighthouse-impact -->/),
      {
        githubToken,
        repositoryOwner,
        repositoryName,
        pullRequestNumber,
      },
    )

    logger.debug(
      `searching lighthouse comment in pull request ${getPullRequestUrl({
        repositoryOwner,
        repositoryName,
        pullRequestNumber,
      })}`,
    )

    const [[baseReportFileContent, headReportFileContent], existingComment] = await createOperation(
      {
        cancellationToken,
        start: () => Promise.all([filePromises, existingCommentPromise]),
      },
    )
    const baseReport = JSON.parse(baseReportFileContent)
    const headReport = JSON.parse(headReportFileContent)

    const baseGistData = {
      githubToken,
      files: {
        [`${repositoryOwner}-${repositoryName}-pr-${pullRequestNumber}-base-lighthouse-report.json`]: {
          content: JSON.stringify(baseReport),
        },
      },
    }
    const headGistData = {
      githubToken,
      files: {
        [`${repositoryOwner}-${repositoryName}-pr-${pullRequestNumber}-merged-lighthouse-report.json`]: {
          content: JSON.stringify(headReport),
        },
      },
    }

    if (existingComment) {
      logger.debug(`comment found at ${commentToUrl(existingComment)}.`)

      const gistIds = commentToGistIds(existingComment)
      if (!gistIds) {
        logger.error(`cannot find gist id in comment body
--- comment body ---
${existingComment.body}`)
        return null
      }
      const { baseGistId, headGistId } = gistIds
      logger.debug(`gist found
--- gist for base lighthouse report ---
${gistIdToUrl(baseGistId)}
--- gist for head lighthouse report ---
${gistIdToUrl(headGistId)}`)

      logger.debug(`update or create both gists.`)
      let [baseGist, headGist] = await Promise.all([
        getGist(baseGistId, { githubToken }),
        getGist(headGistId, { githubToken }),
      ])
      if (baseGist) {
        logger.debug("base gist found, updating it")
        baseGist = await updateGist(baseGist.id, baseGistData)
      } else {
        logger.debug(`base gist not found, creating it`)
        baseGist = await createGist(baseGistData)
      }
      if (headGist) {
        logger.debug("head gist found, updating it")
        headGist = await updateGist(headGist.id, headGistData)
      } else {
        logger.debug(`head gist not found, creating it`)
        headGist = await createGist(headGistData)
      }

      logger.debug(`updating comment at ${commentToUrl(existingComment)}`)
      const commentId = comment.id
      const comment = await updatePullRequestComment({
        githubToken,
        repositoryOwner,
        repositoryName,
        pullRequestNumber,
        commentId,
        commentBody: generateCommentBody({
          baseReport,
          headReport,
          baseGist,
          headGist,
          pullRequestBase,
          pullRequestHead,
        }),
      })
      logger.log("comment updated")

      return {
        baseGist,
        headGist,
        comment,
      }
    }

    logger.debug(`comment not found`)

    logger.debug(`creating base and head gist`)
    const [baseGist, headGist] = await Promise.all([
      createGist(baseGistData),
      createGist(headGistData),
    ])
    logger.debug(`gist created.
--- gist for base lighthouse report ---
${gistToUrl(baseGist)}
--- gist for head lighthouse report ---
${gistToUrl(headGist)}`)

    logger.debug(`creating comment`)
    const comment = await createPullRequestComment({
      githubToken,
      repositoryOwner,
      repositoryName,
      pullRequestNumber,
      commentBody: generateCommentBody({
        baseReport,
        headReport,
        baseGist,
        headGist,
        pullRequestBase,
        pullRequestHead,
      }),
    })
    logger.debug(`comment created at ${commentToUrl(comment)}`)

    return {
      baseGist,
      headGist,
      comment,
    }
  })
}

const gistIdRegex = new RegExp(
  "https:\\/\\/googlechrome\\.github\\.io\\/lighthouse\\/viewer\\/\\?gist=([a-zA-Z0-9_]+)",
)

const commentToGistIds = (comment) => {
  const result = comment.body.match(gistIdRegex)
  return result[1]
}

const commentToUrl = (comment) => {
  return comment.html_url
}

const gistIdToUrl = (gistId) => {
  return `https://gist.github.com/${gistId}`
}

const gistToUrl = (gist) => {
  return gist.html_url
}

const getPullRequestUrl = ({ repositoryOwner, repositoryName, pullRequestNumber }) =>
  `https://github.com/${repositoryOwner}/${repositoryName}/pull/${pullRequestNumber}`
